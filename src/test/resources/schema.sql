drop table if exists epic_subtasks, tasks;
--drop type if exists task_type, status;
--drop sequence if exists epic_subtasks_epic_id_seq, epic_subtasks_subtask_id_seq;

create sequence if not exists epic_subtasks_epic_id_seq
    as integer;

--alter sequence epic_subtasks_epic_id_seq owner to postgres;

create sequence if not exists epic_subtasks_subtask_id_seq
    as integer;

--alter sequence epic_subtasks_subtask_id_seq owner to postgres;

create type if not exists status as enum ('NEW', 'IN PROGRESS', 'DONE');

--alter type status owner to postgres;

create type if not exists task_type as enum ('TASK', 'SUBTASK', 'EPIC');

--alter type type owner to postgres;

create table if not exists epic_subtasks
(
    epic_id    integer not null,
    subtask_id integer not null,
    constraint epic_subtasks_pk
        primary key (epic_id, subtask_id)
);


create table if not exists tasks
(
    task_id     integer generated by default as identity
        primary key,
    name        varchar(50) not null,
    description varchar(500),
    status      status default 'NEW'::status,
    task_type        task_type   default 'TASK'::task_type,
    end_time    timestamp,
    duration    bigint default '60'::bigint,
    start_time  timestamp   not null
);
